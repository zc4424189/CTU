// TCPCustom.cpp: implementation of the CTCPCustom class.
//
//////////////////////////////////////////////////////////////////////


#include "TCPCustom.h"
#include "TCPServer.h"


//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

//构造函数
CTCPCustom::CTCPCustom()
{
   m_SocketEnable = 0;
   m_ExitThreadFlag = 0;
}


//析构函数
CTCPCustom::~CTCPCustom()
{
   //关闭线程退出事件
}

/*--------------------------------------------------------------------
【函数介绍】: 此线程用于监听与客户端连接的socket通讯的事件，例如当接收到数据、
			   连接断开和通讯过程发生错误等事件
【入口参数】: lparam:无类型指针，可以通过此参数，向线程中传入需要用到的资源。
			   在这里我们将CTCPCustom类实例指针传进来
【出口参数】:  (无)
【返回  值】:   无
---------------------------------------------------------------------*/
void* CTCPCustom::SocketDataThread(void* lparam)
{
	CTCPCustom *pSocket;
	char		TxBuf[2000];
	int			TxLen;
	//得到CTCPCustom类实例指针
	pSocket = (CTCPCustom*)lparam;

	//定义读事件集合
	fd_set fdRead;  
	int ret;
	struct timeval	aTime;
	aTime.tv_sec = 0;
	aTime.tv_usec = 0;

	while( 1 )
	{
        //收到退出事件，结束线程
		usleep(100000);
		if( pSocket->m_ExitThreadFlag )
		{
			break;
		}

		//置空读事件集合
		FD_ZERO(&fdRead);

		//给pSocket设置读事件
		FD_SET(pSocket->m_socketfd, &fdRead );
		//调用select函数，判断是否有读事件发生
		aTime.tv_sec = 0;
		aTime.tv_usec = 100000;
		ret = select(0, &fdRead, NULL, NULL, &aTime);
		
		if( ret<0 )
		{
			//关闭socket
			close( pSocket->m_socketfd );
			break;
		}
		
		else
		{
			//判断是否读事件
			if(FD_ISSET(pSocket->m_socketfd,&fdRead))
			{
				pSocket->RecvLen = recv(pSocket->m_socketfd, pSocket->RecvBuf, 1024,0);
				if (pSocket->RecvLen < 0 )
				{
					//与客户端端连接的Socket错误
					printf( "Socket error\n");
					//关闭socket
					close(pSocket->m_socketfd);
					break;

				}
				//表示连接已经从容关闭
				else if( pSocket->RecvLen == 0)
				{
					printf( "Close socket %d\n", pSocket->m_socketfd );
					//关闭socket
					close(pSocket->m_socketfd);
					break;
				}
				else
				{
					//对接收的数据进行处理，这里为简单处理数据回发
					pSocket->RecvBuf[pSocket->RecvLen]=0;
					printf( "RCV:%s\n", pSocket->RecvBuf);
					TxLen = pSocket->DataPro( TxBuf );
					if( TxLen>0 )
					{
						pSocket->SendData( TxBuf, TxLen );
					}
					//处理完毕
				}
			}
		}
	}

	printf( "SocketDataThread finished\n");
	pthread_exit( NULL );
	//释放TCPCustom指针
	pSocket->m_pTCPServer->RemoveClientSocketObject( (void*)pSocket );
}


int CTCPCustom::DataPro( char* OutDatBuf )
{
	int         len=0;
	time_t      t;
	struct tm   *p;
	char        str[80];

	if( RecvLen<=0 )
		return 0;

	switch( RecvBuf[0] )
	{
	case 0x10:     //设置系统时间
		sprintf(str, "date -s %s", &RecvBuf[1] );
		system( str );
		system( "hwclock --systohc");
		time( &t );
		p = localtime ( &t );
		sprintf( OutDatBuf, "date %d.%d.%d-%d:%d:%d\n", p->tm_year + 1900, p->tm_mon+1, p->tm_mday, p->tm_hour, p->tm_min, p->tm_sec );
		len = strlen( OutDatBuf );
		break;
	case 0x11:     //获取系统时间
		time( &t );
		p = localtime ( &t );
		sprintf( OutDatBuf, "date %d.%d.%d-%d:%d:%d\n", p->tm_year + 1900, p->tm_mon+1, p->tm_mday, p->tm_hour, p->tm_min, p->tm_sec );
		len = strlen( OutDatBuf );
		break;
	default:
		memcpy( OutDatBuf, RecvBuf, RecvLen );
		len = RecvLen;
		break;
	}
	return len;
}



/*--------------------------------------------------------------------
【函数介绍】: 打开socket，创建通讯线程
【入口参数】:  pTCPServer指向服务器端监听socket
【出口参数】:  (无)
【返回  值】:  1:打开成功;0:打开失败
---------------------------------------------------------------------*/
int CTCPCustom::Open(void* lparam)
{
	int					res, flags;
	pthread_attr_t 		attr;

	m_pTCPServer = (CTCPServer*)lparam;

	//创建通讯线程, 把侦听服务器类指针带入线程
	res = pthread_attr_init(&attr);
	if( res!=0 )
	{
		printf("Create attribute failed\n" );
	}
	// 设置线程绑定属性
	res = pthread_attr_setscope( &attr, PTHREAD_SCOPE_SYSTEM );
	// 设置线程分离属性
	res += pthread_attr_setdetachstate( &attr, PTHREAD_CREATE_DETACHED );
	if( res!=0 )
	{
		printf( "Setting attribute failed\n" );
	}

	res = pthread_create( &m_thread, &attr, SocketDataThread, this );
	if( res!=0 )
	{
		close( m_socketfd );
		return 0;
	}
	pthread_attr_destroy( &attr );


	//设置通讯模式为异步模式
	flags = fcntl(m_socketfd, F_GETFL);
	if( (flags<0)||((fcntl(m_socketfd, F_SETFL, flags |O_ASYNC))<0) )
	{
		perror("fcntl");
	}

	m_SocketEnable = 1;
	return 1;
}

/*--------------------------------------------------------------------
【函数介绍】: 关闭socket，关闭线程，释放Socket资源
【入口参数】:  (无)
【出口参数】:  (无)
【返回  值】:  1:成功关闭;0:关闭失败
---------------------------------------------------------------------*/
int CTCPCustom::Close()
{
	m_ExitThreadFlag = 1;

   //关闭Socket，释放资源
   int err = close(m_socketfd);
   if( err<0 )
   {
	   return 0;
   }
   return 1;
}


/*-----------------------------------------------------------------
【函数介绍】: 向客户端发送数据
【入口参数】: buf: 待发送的数据
              len: 待发送的数据长度
【出口参数】: (无)
【返回  值】: >0: 发送数据成功, 返回所发送的数据长度; 
              <0: 发送数据失败。
------------------------------------------------------------------*/
int CTCPCustom::SendData( const char *buf , int len )
{
	int nBytes = 0;
	int nSendBytes=0;

	while(nSendBytes < len)
	{
	    nBytes = send(m_socketfd,buf+nSendBytes,len-nSendBytes,0);
		if (nBytes<0 )
		{
			return nBytes;
		}

		nSendBytes = nSendBytes + nBytes;
		
		if (nSendBytes < len)
		{
		    sleep(1);
		}
	} 
	return nSendBytes; 
}
